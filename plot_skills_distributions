#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 18 12:30:23 2021

@author: carolineskalla
"""
import matplotlib.pyplot as plt

import numpy as np
import numpy.matlib
import random
import math
import matplotlib.pyplot as plt
import generate_agents
import generate_tasks
import assign_tasks
import simple_solve
import calc_fd
import similarity
import assign_tasks2
import calc_threshold

#Parameters:
numfuncs = 9
numagents = 10
#gDiv = np.repeat(1/nfunc, 9)
#gDiv = [1/numfuncs for i in range(0,9)]
gDiv2 = 1.00000000e-01
gDiv1 = 1000
#gDiv = [1, 0, 0, 0, 0, 0, 0, 0, 0]
anorm = 10; #The sum of capabilities of agents,
aDiv1 = [1,10]#This is where intra-agent diversity can be set: the higher, the more diverse
aDiv2 = [100,10]
tnorm = 10
numtasks=10
stop = 5000

#generate agents
#agents = GenAgent(par.numfuncs, par.numagents, [adiv, par.agspread], exp((-(0:par.numfuncs-1).^2)/gdiv), par.anorm)
agents1 = generate_agents.gen_agents(numfuncs, numagents, aDiv1, (np.exp(-(np.array(range(0, numfuncs))**2/gDiv1)))/sum(np.exp(-(np.array(range(0, numfuncs))**2/gDiv1))), anorm)
agents2 = generate_agents.gen_agents(numfuncs, numagents, aDiv2, (np.exp(-(np.array(range(0, numfuncs))**2/gDiv2)))/sum(np.exp(-(np.array(range(0, numfuncs))**2/gDiv2))), anorm)
#agents = generate_agents.gen_agents(numfuncs, numagents, aDiv, (np.exp(-(np.array(range(0, numfuncs))**2/gDiv))), anorm)
#plot_skills_distr(agents)
#plot_skills_distr(agents)
#print((sum(np.exp(-(np.array(range(0, numfuncs))**2/gDiv)))))
#print((sum(np.exp(-(np.array(range(0, numfuncs))**2/gDiv)))/sum(np.exp(-(np.array(range(0, numfuncs))**2/gDiv)))))


#each bar will be an agent, each section of the bar represents a functional area, the x axis will represent the skill strength of each functional area.




a_names = ["Agent 1", "Agent 2", "Agent 3", "Agent 4", "Agent 5", "Agent 6", "Agent 7", "Agent 8", "Agent 9", "Agent 10"]

#input functional areas:
fa1 = agents1[:,0] 
fa2 = agents1[:,1] 
fa3 = agents1[:,2] 
fa4 = agents1[:,3] 
fa5 = agents1[:,4]
fa6 = agents1[:,5]
fa7 = agents1[:,6]
fa8 = agents1[:,7]
fa9 = agents1[:,8]

#input functional areas:
fa11 = agents2[:,0] 
fa22 = agents2[:,1] 
fa33 = agents2[:,2] 
fa44 = agents2[:,3] 
fa55 = agents2[:,4]
fa66 = agents2[:,5]
fa77 = agents2[:,6]
fa88 = agents2[:,7]
fa99 = agents2[:,8]

#fig = plt.figure()
#ax = fig.add_subplot(111)

fig, (ax1, ax2) = plt.subplots(1, 2)
fig.suptitle('Functional area distributions')
#ax1.plot(x, y)
#ax2.plot(x, -y)
l1 = []
l1.append(ax1.barh(a_names, fa1, align='center', height=.25, label=fa1))
l1.append(ax1.barh(a_names, fa2, align='center', height=.25, left=fa1,label=fa2))
l1.append(ax1.barh(a_names, fa3, align='center', height=.25, left=fa1+fa2,label=fa3))
l1.append(ax1.barh(a_names, fa4, align='center', height=.25, left=fa1+fa2+fa3,label=fa4))
l1.append(ax1.barh(a_names, fa5, align='center', height=.25, left=fa1+fa2+fa3+fa4,label=fa5))
l1.append(ax1.barh(a_names, fa6, align='center', height=.25, left=fa1+fa2+fa3+fa4+fa5,label=fa6))
l1.append(ax1.barh(a_names, fa7, align='center', height=.25, left=fa1+fa2+fa3+fa4+fa5+fa6,label=fa7))
l1.append(ax1.barh(a_names, fa8, align='center', height=.25, left=fa1+fa2+fa3+fa4+fa5+fa6+fa7,label=fa8))
l1.append(ax1.barh(a_names, fa9, align='center', height=.25, left=fa1+fa2+fa3+fa4+fa5+fa6+fa7+fa8,label=fa9))

ax2.barh(a_names, fa11, align='center', height=.25, label=fa11)
ax2.barh(a_names, fa22, align='center', height=.25, left=fa11,label=fa22)
ax2.barh(a_names, fa33, align='center', height=.25, left=fa11+fa22,label=fa33)
ax2.barh(a_names, fa44, align='center', height=.25, left=fa11+fa22+fa33,label=fa44)
ax2.barh(a_names, fa55, align='center', height=.25, left=fa11+fa22+fa33+fa44,label=fa55)
ax2.barh(a_names, fa66, align='center', height=.25, left=fa11+fa22+fa33+fa44+fa55,label=fa66)
ax2.barh(a_names, fa77, align='center', height=.25, left=fa11+fa22+fa33+fa44+fa55+fa66,label=fa77)
ax2.barh(a_names, fa88, align='center', height=.25, left=fa11+fa22+fa33+fa44+fa55+fa66+fa77,label=fa88)
l2 = ax2.barh(a_names, fa99, align='center', height=.25, left=fa11+fa22+fa33+fa44+fa55+fa66+fa77+fa88,label=fa99)


"""
ax.barh(a_names, fa1, align='center', height=.25)
ax.barh(a_names, fa2, align='center', height=.25,label=fa2)
ax.barh(a_names, fa3, align='center', height=.25,label=fa3)
ax.barh(a_names, fa4, align='center', height=.25, label=fa4)
ax.barh(a_names, fa5, align='center', height=.25, label=fa5)
ax.barh(a_names, fa6, align='center', height=.25, label=fa6)
ax.barh(a_names, fa7, align='center', height=.25, label=fa7)
ax.barh(a_names, fa8, align='center', height=.25, label=fa9)
ax.barh(a_names, fa9, align='center', height=.25, label=fa9)
"""
ax1.set_yticks(a_names)
ax1.set_xlabel('Skill strength')
ax2.set_xlabel('Skill strength')
ax1.set_title('High DFD, low IFD')
ax2.set_title('Low DFD, high IFD')
ax1.set_xticks([1,2,3,4,5,6,7,8,9,10])
ax2.set_xticks([1,2,3,4,5,6,7,8,9,10])
#ax1.grid(True)
#ax.legend()
plt.tight_layout()
#plt.savefig('C:\\Data\\stackedbar.png')
labels = ['Functional area 0', 'Functional area 1', 'Functional area 2', 'Functional area 3', 'Functional area 4', 'Functional area 5', 'Functional area 6', 'Functional area 7', 'Functional area 8', 'Functional area 9']
#handles, labels = ax.get_legend_handles_labels()
fig.legend(l1, labels, loc='upper center', bbox_to_anchor=(1.15, 0.85),
          fancybox=True, shadow=True, ncol=1)
plt.show()

    
